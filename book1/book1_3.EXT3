1_3 找出重复的行
1.bufio包的scanner类型：
  使用它可以简便方便的处理输入和输出。其中一个最有用的特性是称为扫描器（scanner）的类型。
###scanner类型：
  它可以读取输入，以行或者单词为单位断开，这是处理以行或单词为单位的输入内容最简单的方式。我们可以用段变量声明新建一个bufio.Scanner类型input变量：
  input := bufio.NewScanner(os.stdin)//这里的os.stdio表示标准输入缓冲区，意思是从缓冲区里面读取内容。
  扫描器从程序的标准输入读取。每一次调用input.Scan()读取下一行，并且将结尾的换行符去掉。通过调用input.Text（）来读取内容。然后Scan函数在读取内容时返回true，没有读取内容时返回false。感觉input像一个小包，小包有scan和text两个函数可以调用。但应该不是包，或许只是这个变量可以调用函数。

2.os包open函数和close函数:
  两个函数一个用来打开文件，一个用来关闭文件。
###open：
  f,err := os.Open(arg) //arg是文件名
  open返回两个值，第一个是文件的内容,第二个是该函数内置error类型，用来判断是否正确打开文件。如果打开了会返回默认值nil。注意该内容应该是一个指针指向该文件，不能用强制类型转换转成string。但可以用scan函数处理。
  close函数关闭该文件 格式为： f.Close() 其中f为open返回的文件内容。调用close函数即可。

3.go中函数调用和函数声明不分先后，你可以把函数声明写在main后面

4.运行读取文件的程序指令：go run dup2.go ./test.txt
  dup2.go为程序名，./后面是文件名。当有多个文件时，继续./,一个./对应一个被打开的文件
  go run dup2.go ./test.txt ./test2.txt
###注意不能打开go格式的文件，会提示main redecleared。

5.对make的一些知识：
  make声明变量后，这个变量传进函数时，函数接收到这个引用的副本。所以被调用的函数对该变量的操作会保留下来，在main函数中也是可见的。换句话说，想用函数处理变量，该变量就要申请内存（至少map变量可行）

6.ioutil包的ReadFile:
  readfile函数接收文件，是真正意义上的接收全部文件。返回两个值，前者内容，后者和open一样的判断是否接收成功的变量。其内容可以直接用强制类型转换成string，是一个可以转换成字符串的字节slice。(byte[]类型)
  data,err :=readfile（file name）参数必须是指定文件名

7.strings包的split：
  该函数将一个字符串string分为一个由子串组成的slice，是strings包中join的反操作。
  strings.Split(string(data),"\n") 一共有两个参数，第一个是字符串变量名，第二个是切开的依据，切开位置在这里断开，并且这个位置的字符丢弃。这里表示遇到换行断开。

一堆疑问:
1.命令行参数用绝对路径怎么打开文件 只会相对路径打开
2.os.Stderr有什么用 好像是用来题是错误信息的
3.为什么不能打开go格式文件,和open都能打开哪些格式的文件。
